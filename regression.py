# -*- coding: utf-8 -*-
"""Copy of Assignment_template_DSF.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rRZwyD2VezW8n6IaLNH_c0ykCYbczRZp

### Gunakan dataset student score
1. Lakukan proses Exploratory data analysis
2. Lakukan feature engineering :
- Check Duplicated Data
- Check Missing Value Handling
- Outlier Analysis
3. Lakukan modelling machine learning regression : gunakan minimal 2 model (linear regression, decision tree regressor, atau random forest regressor)
4. Lakukan evaluasi model
5. Berikan kesimpulan model mana yang terbaik performanya

## **0. *Preparation***
"""

from google.colab import drive
drive.mount('/content/drive')

# Import libraries and resources
import pandas as pd
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import seaborn as sns

dataset = pd.read_csv('/content/drive/MyDrive/content/student_scores.csv')
dataset.head()

"""Loading the data into the data frame"""

dataset.tail(5)

dataset.dtypes

dataset.info()

dataset.value_counts()

dataset.describe()

"""## **1. *Exploratory data analysis***

## **2. *Feature Engineering***

*   *Check Missing Value Handling*
"""

# check missing  values
dataset.isna().sum()

dataset.value_counts()

"""*   *Check Duplicated Data*"""

df = dataset.copy()

# Check Any Duplicates
print("Before duplicates checking : ")
print(df.shape)

duplicate_rows_before = df[df.duplicated()]
print("Number of duplicate rows : ", duplicate_rows_before.shape)

print("After duplicates checking : ")
print(df.shape)

"""* *Outlier Analysis*"""

plt.figure(figsize=(12,6))
sns.pairplot(dataset,x_vars=['Hours'],y_vars=['Scores'], size=7, kind="scatter")
plt.xlabel('Hours')
plt.ylabel('Scores')
plt.title('Student Scores Prediction')
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# Outlier Analysis
sns.boxplot(x="Hours", data=df)

# Menambahkan label sumbu dan judul
plt.xlabel("Hours")
plt.ylabel("Scores")  # Anda bisa menggunakan "Years of Experience" atau "Tahun Pengalaman"
plt.title("Student Scores Prediction")

# Menampilkan plot
plt.show()

"""# **Splitting Data**"""

# Hours data
X = dataset['Hours']
X.head()

# Scores data
y = dataset['Scores']
y.head()

# Import machine learning data from scikit learn
from sklearn.model_selection import train_test_split

# Split the data for train and test
X_train,X_test,y_train,y_test = train_test_split(X,y,train_size=0.75,random_state=42)

# Importing Linear Regression model from scikit learn
from sklearn.linear_model import LinearRegression

# Create new axis for x column in array
import numpy as np
# Convert X_train and X_test to NumPy arrays
X_train = X_train.to_numpy()
X_test = X_test.to_numpy()

# Add new axis to the end
X_train = X_train[:, np.newaxis]
X_test = X_test[:, np.newaxis]

#array
X_train

#array
X_test

#array
y_train

#array
y_test

# Fitting the model using Linear Regression
lr_model = LinearRegression()
lr_model.fit(X_train,y_train)

# Predicting the Scores for the Test values
y_pred = lr_model.predict(X_test)

X_test

y_pred

# Plotting the actual and predicted values

c = [i for i in range (1,len(y_test)+1,1)]
plt.plot(c,y_test,color='r',linestyle='-',label='Actual Data')
plt.plot(c,y_pred,color='b',linestyle='dashed',label='Prediction')
plt.xlabel('Hours')
plt.ylabel('Scores')
plt.title('Prediction with Linear Regression')
plt.legend()
plt.show()

# Importing metrics for the evaluation of the model
from sklearn.metrics import r2_score,mean_squared_error

# Calculate R square vale
rsq = r2_score(y_test,y_pred)

print('r square Linear Regression:',rsq)

# Intecept and coeff of the line
print('Intercept of the Linear Regression model:',lr_model.intercept_)
print('Coefficient of the line Linear Regression:',lr_model.coef_)

"""

Decision Tree Regressor Using another Machine Learning Model :

    Decision Tree
    Random Forest"""

from sklearn.tree import DecisionTreeRegressor

dt_model = DecisionTreeRegressor()
dt_model.fit(X_train, y_train)

# Predicting the Scores for the Test values
y_pred_dt = dt_model.predict(X_test)

y_pred_dt

y_test

X_test

# Plotting the actual and predicted values

c = [i for i in range (1,len(y_test)+1,1)]
plt.plot(c,y_test,color='r',linestyle='-',label='Actual Data')
plt.plot(c,y_pred_dt,color='b',linestyle='dashed',label='Prediction')
plt.xlabel('Hours')
plt.ylabel('Scores')
plt.title('Prediction with Decision Tree')
plt.legend()
plt.show()

# Calculate R square vale
rsq_dt = r2_score(y_test,y_pred_dt)

print('r square Decision Tree Results:',rsq_dt)

"""Random Forrest"""

from sklearn.ensemble import RandomForestRegressor
model_rf = RandomForestRegressor()

rf_model = RandomForestRegressor()
rf_model.fit(X_train, y_train)

# Predicting the Scores for the Test values
y_pred_rf = rf_model.predict(X_test)

y_pred_rf

y_test

X_test

# Plotting the actual and predicted values

c = [i for i in range (1,len(y_test)+1,1)]
plt.plot(c,y_test,color='r',linestyle='-',label='Actual Data')
plt.plot(c,y_pred_rf,color='b',linestyle='dashed',label='Prediction')
plt.xlabel('Hours')
plt.ylabel('Scores')
plt.title('Prediction with Random Forest')
plt.legend()
plt.show()

# Calculate R square vale
rsq_rf = r2_score(y_test,y_pred_rf)

print('r square Random Forrest Results:',rsq_rf)

"""conclussion of all"""

print('r square Linear Regression:',rsq)
print('r square Decision Tree Results:',rsq_dt)
print('r square Random Forrest Results:',rsq_rf)